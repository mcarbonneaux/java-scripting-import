/*
Copyright � 2006 Sun Microsystems, Inc., 4150 Network Circle, Santa  Clara, California
95054, U.S.A. All rights reserved.U.S. Government Rights - Commercial software.
Government users are subject to the Sun Microsystems, Inc. standard license agreement
and applicable provisions of the FAR and its supplements.  Use is subject to license
terms.  Sun, Sun Microsystems,  the Sun logo,  Java and  Jini are trademarks or registered
trademarks of Sun Microsystems, Inc. in the U.S. and other countries. This product is
covered and controlled by U.S. Export Control laws and may be subject to the export or import
laws in other countries.  Nuclear, missile, chemical biological weapons or nuclear maritime 
end uses or end users, whether direct or indirect, are strictly prohibited. Export or reexport
to countries subject to U.S. embargo or to entities identified on U.S. Export exclusion lists,
including, but not limited to, the denied persons and specially designated nationals lists is
strictly prohibited.

Copyright � 2006 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,  California 95054,
Etats-Unis. Tous droits r�serv�s.L'utilisation est soumise aux termes de la Licence.Sun, Sun
Microsystems,  le logo Sun,  Java et  Jini sont des  marques de fabrique ou des marques 
d�pos�es de Sun Microsystems, Inc. aux Etats-Unis et dans d'autres pays.Ce produit est soumis
� la l�gislation am�ricaine en mati�re de contr�le des exportations et peut �tre soumis � la 
r�glementation en vigueur dans d'autres pays dans le domaine des exportations et importations.
Les utilisations, ou utilisateurs finaux, pour des armes nucl�aires,des missiles, des armes 
biologiques et chimiques ou du nucl�aire maritime, directement ou indirectement, sont 
strictement interdites. Les exportations ou r�exportations vers les pays sous embargo 
am�ricain, ou vers des entit�s figurant sur les listes d'exclusion d'exportation am�ricaines,
y compris, mais de mani�re non exhaustive, la liste de personnes qui font objet d'un ordre de
ne pas participer, d'une fa�on directe ou indirecte, aux exportations des produits ou des 
services qui sont r�gis par la l�gislation am�ricaine en mati�re de contr�le des exportations
et la liste de ressortissants sp�cifiquement d�sign�s, sont rigoureusement interdites.
*/
package org.chuk.lee.scriptengine;

import java.io.*;
import java.net.*;
import java.util.*;
import javax.script.*;
import javax.swing.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import org.openide.ErrorManager;
import org.openide.NotifyDescriptor;
import org.openide.util.*;

final class ScriptEnginePanel extends javax.swing.JPanel {
    
    private final ScriptEngineOptionsPanelController controller;
    private boolean change = false;    
    
    ScriptEnginePanel(ScriptEngineOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
        loadTable();
    }
    
    public boolean isInitializeRepository() {
        return (initialize.isSelected());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        scriptRepositoryField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        initialize = new javax.swing.JCheckBox();
        messageLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        scriptEngineTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();

        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setBackground(java.awt.Color.white);
        setBorder(javax.swing.BorderFactory.createTitledBorder("Script Engine Configuration"));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Script repository:");

        scriptRepositoryField.setFont(new java.awt.Font("Dialog", 0, 10));
        scriptRepositoryField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                scriptRepositoryFieldKeyTyped(evt);
            }
        });

        browseButton.setFont(new java.awt.Font("Dialog", 1, 10));
        org.openide.awt.Mnemonics.setLocalizedText(browseButton, ". . .");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        initialize.setBackground(new java.awt.Color(255, 255, 255));
        initialize.setFont(new java.awt.Font("Dialog", 1, 10));
        org.openide.awt.Mnemonics.setLocalizedText(initialize, "Initialize script repository");
        initialize.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        initialize.setMargin(new java.awt.Insets(0, 0, 0, 0));

        messageLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        messageLabel.setForeground(new java.awt.Color(255, 0, 51));
        org.openide.awt.Mnemonics.setLocalizedText(messageLabel, "jLabel2");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 10));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Installed script engines:");

        scriptEngineTable.setFont(new java.awt.Font("Dialog", 0, 10));
        scriptEngineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane.setViewportView(scriptEngineTable);

        addButton.setFont(new java.awt.Font("Dialog", 1, 10));
        org.openide.awt.Mnemonics.setLocalizedText(addButton, "Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(initialize))
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(scriptRepositoryField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(browseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(messageLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(scriptRepositoryField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(browseButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(initialize)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addButton)
                    .add(messageLabel))
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void loadTable() {
        
        try {
            Singletons.setServiceLoader(new ServiceLoaderUtilities(System.getProperty("java.class.path")));               
        } catch (Exception e) {
            ErrorManager.getDefault().notify(e);
            return;
        }
        
        scriptEngineTable.setModel(Singletons.getServiceLoader().getTableModel());
        
        try {
            Thread.currentThread().setContextClassLoader(Singletons.getServiceLoader().getClassLoader());
        } catch (Exception e) {
            NotifyDescriptor nd = new NotifyDescriptor.Message(
                    "Cannot set script engine Jars to classpath.\n"
                    + "The security manager is set for NetBeans.\n"
                    + "Either restart NetBeans with the Jars in\n"
                    + "CLASSPATH environment variable or reconfigure\n"
                    + "java.policy file to allow NetBeans classes to\n"
                    + "allow RuntimePermission to setContextClassLoader."
                    + "Note: the java.policy portion is intentionally cryptic."
                    , NotifyDescriptor.WARNING_MESSAGE
            );
        }
    }
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
// TODO add your handling code here:
        ClassPathPanel panel = new ClassPathPanel();
        ConfigurationValues vals = Singletons.getConfigurationValues();
        panel.setClassPath(vals.getClassPath());
        
        JOptionPane opt = new JOptionPane(panel, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
        JDialog dialog = opt.createDialog(null, "Classpath");
        dialog.pack();
        dialog.setVisible(true);
        
        if (((Integer)opt.getValue()).intValue() == JOptionPane.CANCEL_OPTION)
            return;
        
        vals.setClassPath(panel.getClassPath());
        System.setProperty("java.class.path"
                , vals.getOriginalClassPath() + File.pathSeparator + vals.getClassPath());
        
        //indicate that the table model has changed

        change = true;             
        
        loadTable();        
    }//GEN-LAST:event_addButtonActionPerformed
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
// TODO add your handling code here:
        if (jFileChooser1.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        String s = jFileChooser1.getSelectedFile().getAbsolutePath();
        scriptRepositoryField.setText(s);
        if (!validRepository(s))
            messageLabel.setText("Please enter a valid script repository");
        else
            messageLabel.setText("");
    }//GEN-LAST:event_browseButtonActionPerformed
    
    private void scriptRepositoryFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scriptRepositoryFieldKeyTyped
// TODO add your handling code here:
        
        String s = scriptRepositoryField.getText();
        
        if (!Character.isIdentifierIgnorable(evt.getKeyChar()))
            s+= evt.getKeyChar();
        
        if (!validRepository(s)) {
            messageLabel.setText("Please enter a valid script repository");
            return;
        }
        
        messageLabel.setText("");
    }//GEN-LAST:event_scriptRepositoryFieldKeyTyped
    
    void load() {
        // TODO read settings and initialize GUI
        // Example:
        // someCheckBox.setSelected(Preferences.userNodeForPackage(ScriptEnginePanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        ConfigurationValues values = Singletons.getConfigurationValues();
        String rep = values.getScriptRepository();
        
        if (!validRepository(rep))
            messageLabel.setText("Please enter a valid script repository");
        else
            messageLabel.setText("");
        
        initialize.setSelected(false);
        scriptRepositoryField.setText(rep);
    }
    
    void store() {
        ConfigurationValues values = Singletons.getConfigurationValues();
        values.setScriptRepository(scriptRepositoryField.getText().trim());
        if (change) {           
            change = false;
            values.notifyTableModelChanged();
        }
    }
    
    boolean valid() {
        // TODO check whether form is consistent and complete
        return (validRepository(scriptRepositoryField.getText()));
        
    }
    
    boolean validRepository(String rep) {
        if ((rep == null) || (rep.trim().length() <= 0))
            return (false);
        
        File f = new File(rep);
        
        return (f.isDirectory());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JCheckBox initialize;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JTable scriptEngineTable;
    private javax.swing.JTextField scriptRepositoryField;
    // End of variables declaration//GEN-END:variables
    
}
